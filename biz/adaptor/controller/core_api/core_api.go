// Code generated by hertz generator.

package core_api

import (
	"context"
	"github.com/xh-polaris/schedule-core-api/provider"

	"github.com/xh-polaris/schedule-core-api/biz/adaptor"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"github.com/xh-polaris/schedule-core-api/biz/application/dto/schedule/core_api"
)

// SignUp .
// @router /user/sign_up [POST]
func SignUp(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core_api.SignUpReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	p := provider.Get()
	resp, err := p.UserService.SignUp(ctx, &req)
	adaptor.PostProcess(ctx, c, &req, resp, err)
}

// SignIn .
// @router /user/sign_in [POST]
func SignIn(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core_api.SignInReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	p := provider.Get()
	resp, err := p.UserService.SignIn(ctx, &req)
	adaptor.PostProcess(ctx, c, &req, resp, err)
}

// SendVerifyCode .
// @router /usr/send_verify_code [POST]
func SendVerifyCode(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core_api.SendVerifyCodeReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	p := provider.Get()
	resp, err := p.UserService.SendVerifyCode(ctx, &req)
	adaptor.PostProcess(ctx, c, &req, resp, err)
}

// CreateSchedule .
// @router /schedule/create [POST]
func CreateSchedule(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core_api.CreateScheduleReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	p := provider.Get()
	resp, err := p.ScheduleService.CreateSchedule(ctx, &req)
	adaptor.PostProcess(ctx, c, &req, resp, err)
}

// CreateScheduleFromOrigin .
// @router /schedule/create_ori [POST]
func CreateScheduleFromOrigin(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core_api.CreateScheduleFromOriginReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	p := provider.Get()
	resp, err := p.ScheduleService.CreateScheduleFromOrigin(ctx, &req)
	adaptor.PostProcess(ctx, c, &req, resp, err)
}

// CreateSchedules .
// @router /schedule/create_list [POST]
func CreateSchedules(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core_api.CreateSchedulesReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	p := provider.Get()
	resp, err := p.ScheduleService.CreateSchedules(ctx, &req)
	adaptor.PostProcess(ctx, c, &req, resp, err)
}

// UpdateSchedule .
// @router /schedule/update [POST]
func UpdateSchedule(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core_api.UpdateScheduleReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	p := provider.Get()
	resp, err := p.ScheduleService.UpdateSchedule(ctx, &req)
	adaptor.PostProcess(ctx, c, &req, resp, err)
}

// GetSchedules .
// @router /schedule/list [POST]
func GetSchedules(ctx context.Context, c *app.RequestContext) {
	var err error
	var req core_api.GetSchedulesReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	p := provider.Get()
	resp, err := p.ScheduleService.GetSchedules(ctx, &req)
	adaptor.PostProcess(ctx, c, &req, resp, err)
}
